// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cli_g.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cli_5fg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cli_5fg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cli_5fg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cli_5fg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cli_5fg_2eproto;
namespace serv_g {
class TargetStr;
struct TargetStrDefaultTypeInternal;
extern TargetStrDefaultTypeInternal _TargetStr_default_instance_;
class TranslatedString;
struct TranslatedStringDefaultTypeInternal;
extern TranslatedStringDefaultTypeInternal _TranslatedString_default_instance_;
}  // namespace serv_g
PROTOBUF_NAMESPACE_OPEN
template<> ::serv_g::TargetStr* Arena::CreateMaybeMessage<::serv_g::TargetStr>(Arena*);
template<> ::serv_g::TranslatedString* Arena::CreateMaybeMessage<::serv_g::TranslatedString>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace serv_g {

// ===================================================================

class TargetStr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serv_g.TargetStr) */ {
 public:
  inline TargetStr() : TargetStr(nullptr) {}
  ~TargetStr() override;
  explicit constexpr TargetStr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TargetStr(const TargetStr& from);
  TargetStr(TargetStr&& from) noexcept
    : TargetStr() {
    *this = ::std::move(from);
  }

  inline TargetStr& operator=(const TargetStr& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetStr& operator=(TargetStr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TargetStr& default_instance() {
    return *internal_default_instance();
  }
  static inline const TargetStr* internal_default_instance() {
    return reinterpret_cast<const TargetStr*>(
               &_TargetStr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TargetStr& a, TargetStr& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetStr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TargetStr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TargetStr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TargetStr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TargetStr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TargetStr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetStr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serv_g.TargetStr";
  }
  protected:
  explicit TargetStr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kExitFieldNumber = 5,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // bool exit = 5;
  void clear_exit();
  bool exit() const;
  void set_exit(bool value);
  private:
  bool _internal_exit() const;
  void _internal_set_exit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:serv_g.TargetStr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  bool exit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_5fg_2eproto;
};
// -------------------------------------------------------------------

class TranslatedString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serv_g.TranslatedString) */ {
 public:
  inline TranslatedString() : TranslatedString(nullptr) {}
  ~TranslatedString() override;
  explicit constexpr TranslatedString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TranslatedString(const TranslatedString& from);
  TranslatedString(TranslatedString&& from) noexcept
    : TranslatedString() {
    *this = ::std::move(from);
  }

  inline TranslatedString& operator=(const TranslatedString& from) {
    CopyFrom(from);
    return *this;
  }
  inline TranslatedString& operator=(TranslatedString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TranslatedString& default_instance() {
    return *internal_default_instance();
  }
  static inline const TranslatedString* internal_default_instance() {
    return reinterpret_cast<const TranslatedString*>(
               &_TranslatedString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TranslatedString& a, TranslatedString& b) {
    a.Swap(&b);
  }
  inline void Swap(TranslatedString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranslatedString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TranslatedString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TranslatedString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TranslatedString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TranslatedString& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranslatedString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serv_g.TranslatedString";
  }
  protected:
  explicit TranslatedString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranslatedFieldNumber = 3,
    kSuccessFieldNumber = 2,
    kTimeFieldNumber = 4,
  };
  // optional string translated = 3;
  bool has_translated() const;
  private:
  bool _internal_has_translated() const;
  public:
  void clear_translated();
  const std::string& translated() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_translated(ArgT0&& arg0, ArgT... args);
  std::string* mutable_translated();
  PROTOBUF_NODISCARD std::string* release_translated();
  void set_allocated_translated(std::string* translated);
  private:
  const std::string& _internal_translated() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_translated(const std::string& value);
  std::string* _internal_mutable_translated();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // optional uint32 time = 4;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:serv_g.TranslatedString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr translated_;
  bool success_;
  uint32_t time_;
  friend struct ::TableStruct_cli_5fg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TargetStr

// string text = 1;
inline void TargetStr::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& TargetStr::text() const {
  // @@protoc_insertion_point(field_get:serv_g.TargetStr.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TargetStr::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serv_g.TargetStr.text)
}
inline std::string* TargetStr::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:serv_g.TargetStr.text)
  return _s;
}
inline const std::string& TargetStr::_internal_text() const {
  return text_.Get();
}
inline void TargetStr::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TargetStr::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TargetStr::release_text() {
  // @@protoc_insertion_point(field_release:serv_g.TargetStr.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TargetStr::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serv_g.TargetStr.text)
}

// bool exit = 5;
inline void TargetStr::clear_exit() {
  exit_ = false;
}
inline bool TargetStr::_internal_exit() const {
  return exit_;
}
inline bool TargetStr::exit() const {
  // @@protoc_insertion_point(field_get:serv_g.TargetStr.exit)
  return _internal_exit();
}
inline void TargetStr::_internal_set_exit(bool value) {
  
  exit_ = value;
}
inline void TargetStr::set_exit(bool value) {
  _internal_set_exit(value);
  // @@protoc_insertion_point(field_set:serv_g.TargetStr.exit)
}

// -------------------------------------------------------------------

// TranslatedString

// bool success = 2;
inline void TranslatedString::clear_success() {
  success_ = false;
}
inline bool TranslatedString::_internal_success() const {
  return success_;
}
inline bool TranslatedString::success() const {
  // @@protoc_insertion_point(field_get:serv_g.TranslatedString.success)
  return _internal_success();
}
inline void TranslatedString::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void TranslatedString::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:serv_g.TranslatedString.success)
}

// optional string translated = 3;
inline bool TranslatedString::_internal_has_translated() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TranslatedString::has_translated() const {
  return _internal_has_translated();
}
inline void TranslatedString::clear_translated() {
  translated_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TranslatedString::translated() const {
  // @@protoc_insertion_point(field_get:serv_g.TranslatedString.translated)
  return _internal_translated();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TranslatedString::set_translated(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 translated_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serv_g.TranslatedString.translated)
}
inline std::string* TranslatedString::mutable_translated() {
  std::string* _s = _internal_mutable_translated();
  // @@protoc_insertion_point(field_mutable:serv_g.TranslatedString.translated)
  return _s;
}
inline const std::string& TranslatedString::_internal_translated() const {
  return translated_.Get();
}
inline void TranslatedString::_internal_set_translated(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  translated_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TranslatedString::_internal_mutable_translated() {
  _has_bits_[0] |= 0x00000001u;
  return translated_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TranslatedString::release_translated() {
  // @@protoc_insertion_point(field_release:serv_g.TranslatedString.translated)
  if (!_internal_has_translated()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = translated_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (translated_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    translated_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TranslatedString::set_allocated_translated(std::string* translated) {
  if (translated != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  translated_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), translated,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (translated_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    translated_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serv_g.TranslatedString.translated)
}

// optional uint32 time = 4;
inline bool TranslatedString::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TranslatedString::has_time() const {
  return _internal_has_time();
}
inline void TranslatedString::clear_time() {
  time_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t TranslatedString::_internal_time() const {
  return time_;
}
inline uint32_t TranslatedString::time() const {
  // @@protoc_insertion_point(field_get:serv_g.TranslatedString.time)
  return _internal_time();
}
inline void TranslatedString::_internal_set_time(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  time_ = value;
}
inline void TranslatedString::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:serv_g.TranslatedString.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serv_g

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cli_5fg_2eproto
